#pragma checksum "C:\Users\stkaiser\OneDrive\dev\chatserver\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4d6c26b99f0c1cfe4ab5e4e2628c259c19aefc2c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(chatserver.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace chatserver.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\stkaiser\OneDrive\dev\chatserver\Pages\_ViewImports.cshtml"
using chatserver;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4d6c26b99f0c1cfe4ab5e4e2628c259c19aefc2c", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7979f1271083ecc7ad83094322e26dbf8fc20433", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\stkaiser\OneDrive\dev\chatserver\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
    <div class=""container"">
        <div class=""row"">
            <div class=""eight columns"">
                <h5>Encrypted â€” Ephemeral â€” Secure</h5>
            </div>
        </div>
        <div class=""row"">
            <div id=""discussion"" class=""ten columns""></div>
            <div id=""userlist"">
                <h5>people</h5><div id=""users""></div>
            </div>
                <div class=""row"" >
                    <div class=""eight columns"">
                        <textarea class=""textinput"" rows=""4"" id=""message"" autofocus></textarea>
                    </div>
                    <div class=""one column"">
                        <input type=""button"" id=""sendmessage"" value=""Send"" />
                    </div>
                </div>
                <div class=""row"" >
                    <div class=""six columns"" style=""line-height: 0"">
                        <span class=""info""><b>Ctrl+Enter</b> to send.</span>
                    </div>
                </div>
            <");
            WriteLiteral(@"!--<ul id=""discussion""></ul>-->
        </div>
    </div>
        <!--Script references. -->
        <!--Reference the SignalR library. -->
        <script type=""text/javascript"" src=""lib/signalr.min.js""></script>
        <!--Add script to update the page and send messages.-->
        <script type=""text/javascript"">
            function KeyPress(e) {
                var evtobj = window.event ? event : e
                // handle Ctrl+Enter
                if (evtobj.keyCode == 13 && evtobj.ctrlKey) {
                    document.getElementById('sendmessage').click();
                };
            }

            document.onkeydown = KeyPress;
            document.addEventListener('DOMContentLoaded', function () {

                var messageInput = document.getElementById('message');

                // Get the user name and store it to prepend to messages.
                // Set initial focus to message input box.
                messageInput.focus();

                // Start the co");
            WriteLiteral(@"nnection.
                var connection = new signalR.HubConnectionBuilder()
                    .withUrl('/chat')
                    .withAutomaticReconnect()
                    .build();

                var name;
                console.log(`name = ${name}`);
                if (!name || name === ""null"") {
                    name = getUserName();
                }
                // Create a function that the hub can call to broadcast messages.
                connection.on('broadcastMessage', function (name, message) {
                    var chatDiv = document.createElement(""div"");
                    chatDiv.className = ""chat"";
                    chatDiv.innerHTML = '<div class=""user"" style=""background-color:' + colorFromString(name) + '""><strong>' + name
                        + '</strong></div><div class=""message"">' + message + '</div><span class=""copybutton"" onclick=""copyMessage(this);"">ðŸ—Ž</span></div>';
                    document.getElementById('discussion').appendChild(chat");
            WriteLiteral(@"Div);
                });
                connection.on(""nameList"", function (names) {
                    console.log(names);
                    var nameDiv = document.getElementById(""users"");
                    nameDiv.innerHTML = """";
                    names.forEach(function (x) {
                        var newDiv = document.createElement(""div"");
                        newDiv.className = ""user"";
                        newDiv.style = ""background-color:"" + colorFromString(x);
                        newDiv.innerHTML = x;
                        nameDiv.appendChild(newDiv);
                    });
                });
                // Transport fallback functionality is now built into start.
                connection.start()
                    .then(function () {
                        console.log('connection started');
                        connection.invoke(""registerName"", name);
                        document.getElementById('sendmessage').addEventListener('click', function ");
            WriteLiteral(@"(event) {
                            // Call the Send method on the hub.
                            if (messageInput.value.length > 0) {
                                connection.invoke('send', name, messageInput.value);
                            }

                            // Clear text box and reset focus for next comment.
                            messageInput.value = '';
                            messageInput.focus();
                            event.preventDefault();
                        });
                    })
                    .catch(error => {
                        console.error(error.message);
                    });
            });
            function htmlEncode(value) {
                // TODO this doesn't work; remove jquery
                var encodedValue = $('<div />').text(value).html();
                return encodedValue;
            }
            function getUserName() {
                var answer = prompt('Enter your name:', '');
             ");
            WriteLiteral(@"   displayName = answer || ""anon_"" + Math.floor(Math.random() * 1000);
                displayName = displayName.substr(0, 50);
                return displayName;
            }
            function colorFromString(input_str) {

                // set the minimum value to be used for each R, G, B (0-255)
                var base = 200;

                // get a checksum
                var seed = 0; for (var i in input_str) { seed += input_str.charCodeAt(i) * (i + 1); }

                var rand_1 = Math.abs((Math.sin(seed++) * 10000)) % 256;
                var rand_2 = Math.abs((Math.sin(seed++) * 10000)) % 256;
                var rand_3 = Math.abs((Math.sin(seed++) * 10000)) % 256;

                // build color
                var red = base + Math.round(rand_1 * (1 - base / 255));
                var green = base + Math.round(rand_2 * (1 - base / 255));
                var blue = base + Math.round(rand_3 * (1 - base / 255));
                return ""rgb("" + red + "","" + green + "","" + ");
            WriteLiteral(@"blue + "")"";
            }
            function copyMessage(element) {
                var msg = element.previousElementSibling;
                navigator.clipboard.writeText(msg.innerText).then(function () {
                    console.log(""copied"")
                    var buttons = document.querySelectorAll("".copybutton"");
                    buttons.forEach(x => {
                        x.innerText = ""ðŸ—Ž"";
                    });
                    element.innerText = ""âœ”""
                    element.style.backgroundImage = ""none"";
                }, function () {
                    console.log(""copy failed"");
                }
                );
            }
        </script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
